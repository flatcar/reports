#!/bin/bash

# This script tries to compare the package versions in portage-stable,
# coreos-overlay and gentoo. When done, prints some statistics to
# standard output.
#
# Example invocations:
# ====================
#
# ./compare-flatcar-with-gentoo
#
# export SCRIPTS=../../scripts-repo
# export GENTOO=../../g-repo
# export JSON=x
# ./compare-flatcar-with-gentoo
#
# Environment variables:
# ======================
#
# SCRIPTS:
#
# A path to the scripts git repository. It is assumed that
# coreos-overlay and portage-stable are stored in this repo.
#
# GENTOO:
#
# A path to the gentoo git repository.
#
# JSON:
#
# If not empty, print statistics in JSON format.
#
# Environment variables used for debugging:
# =========================================
#
# WORKDIR:
#
# A path to a working directory that will hold temporary files.
#
# KEEP_WORKDIR:
#
# If specified to non-empty value, then the workdir will be printed to
# standard error if verbose output is enabled and will not be removed
# after script finishes.
#
# VERBOSE:
#
# Print debugging stuff to standard error.

set -euo pipefail

shopt -s extglob

this_dir="$(dirname "${0}")"

: ${SCRIPTS:="${this_dir}/../scripts"}
: ${GENTOO:="${this_dir}/../gentoo"}
: ${JSON:=}
: ${WORKDIR:="$(mktemp --directory "${this_dir}/cfwg.XXXXXXXXXX")"}
: ${KEEP_WORKDIR:=}
: ${VERBOSE:=}

stderr() {
    printf '%s\n' "$*" >/dev/stderr
}

debug() {
    if [[ -z "${VERBOSE}" ]]; then
        return
    fi
    stderr "$@"
}

warn() {
    stderr 'WARNING:' "$@"
}

drop_trailing_slash() {
    local var_name="${1}"

    local -n var_ref="${var_name}"

    var_ref="${var_ref%%*(/)}"
}

drop_trailing_slash SCRIPTS
drop_trailing_slash GENTOO
drop_trailing_slash WORKDIR

COREOS_OVERLAY="${SCRIPTS}/sdk_container/src/third_party/coreos-overlay"
PORTAGE_STABLE="${SCRIPTS}/sdk_container/src/third_party/portage-stable"

mkdir -p "${WORKDIR}"

if [[ -z "${KEEP_WORKDIR}" ]]; then
    trap "rm -rf '${WORKDIR}'" EXIT
else
    debug "WORKDIR='${WORKDIR}'"
fi

debug "SCRIPTS=${SCRIPTS}"
debug "PORTAGE_STABLE=${PORTAGE_STABLE}"
debug "COREOS_OVERLAY=${COREOS_OVERLAY}"
debug "GENTOO=${GENTOO}"

prepend_with() {
    local field_count="${1}"
    local item="${2}"
    local arr_name="${3}"
    local -n arr_ref="${arr_name}"

    while [[ "${#arr_ref[@]}" -lt "${field_count}" ]]; do
        arr_ref=("${item}" "${arr_ref[@]}")
    done
}

append_with() {
    local field_count="${1}"
    local item="${2}"
    local arr_name="${3}"
    local -n arr_ref="${arr_name}"

    while [[ "${#arr_ref[@]}" -lt "${field_count}" ]]; do
        arr_ref+=("${item}")
    done
}

strip_leading_zeros() {
    local num_name="${1}"

    local -n num_ref="${num_name}"

    # strip all leading zeros, will work only if extglob is enabled
    num_ref="${num_ref##*(0)}"

    if [[ -z "${num_ref}" ]]; then
        num_ref='0'
    fi
}

get_plain_version() {
    local ver="${1}"
    local arr_name="${2}"

    # strip everything after first underline or dash, whichever comes
    # first, so for strings like 1.2.3_alpha or 1.2.3-r2 we get 1.2.3
    ver="${ver%%[-_]*}"
    IFS='.' read -ra "${arr_name}" <<< "${ver}"

    local i
    local -n arr_ref="${arr_name}"

    for i in $(seq 0 "$((${#arr_ref[@]}-1))"); do
        strip_leading_zeros "${arr_name}[${i}]"
    done
}

# last version field may have a letter
split_last_version_field() {
    local field="${1}"
    local num_name="${2}"
    local word_name="${3}"

    local -n num_ref="${num_name}"
    local -n word_ref="${word_name}"

    num_ref="${field%%*([a-z])}"
    word_ref="${field##*([0-9])}"

    strip_leading_zeros "${num_name}"
}

get_suffixes() {
    local ver="${1}"
    local arr_name="${2}"
    local ver_tmp

    if [[ ! "${ver}" =~ _ ]]; then
        local -n arr_ref="${arr_name}"
        arr_ref=()
        return
    fi
    ver_tmp="${ver#*_}"
    ver="${ver_tmp%-*}"
    IFS='_' read -ra "${arr_name}" <<< "${ver}"
}

split_suffix() {
    local suffix="${1}"
    local word_name="${2}"
    local num_name="${3}"

    local -n word_ref="${word_name}"
    local -n num_ref="${num_name}"

    word_ref="${suffix%%*([0-9])}"
    num_ref="${suffix##*([a-z])}"

    strip_leading_zeros "${num_name}"
}

get_revision() {
    local version="${1}"
    local rev_name="${2}"

    local -n rev_ref="${rev_name}"

    if [[ ! "${version}" =~ '-' ]]; then
        rev_ref='0'
        return
    fi
    rev_ref="${version##*-r}"

    strip_leading_zeros "${rev_name}"
}

declare -A SUFFIXES=(
    ['alpha']='0'
    ['beta']='1'
    ['pre']=2
    ['rc']=3
    # empty string can't be a key
    # ['']=4
    ['p']=5
)

get_suffix_word_index() {
    local word="${1}"
    local index_ref="${2}"

    local -n index="${index_ref}"

    # we can't put an empty key into the hash map
    if [[ -z "${word}" ]]; then
        index=4
        return
    fi
    # assign -1 to invalid suffix
    index="${SUFFIXES[${word}]--1}"
}

gentoo_vercmp() {
    local a_ver="${1}"
    local b_ver="${2}"
    local res_name="${3}"

    local -n res_ref="${res_name}"

    local -a a_nums
    local -a b_nums
    local a_last_field_idx
    local b_last_field_idx

    get_plain_version "${a_ver}" a_nums
    get_plain_version "${b_ver}" b_nums
    a_last_field_idx="$((${#a_nums[@]}-1))"
    b_last_field_idx="$((${#b_nums[@]}-1))"

    if [[ "${#a_nums[@]}" -ne "${#b_nums[@]}" ]]; then
        if [[ "${#a_nums[@]}" -gt "${#b_nums[@]}" ]]; then
            append_with "${#a_nums[@]}" 0 b_nums
        else
            append_with "${#b_nums[@]}" 0 a_nums
        fi
    fi

    local i
    local a
    local b
    local a_num
    local a_word
    local b_num
    local b_word

    for i in $(seq 0 $(("${#a_nums[@]}" - 1))); do
        a="${a_nums[${i}]}"
        b="${b_nums[${i}]}"

        if [[ "${i}" -eq "${a_last_field_idx}" ]]; then
            split_last_version_field "${a}" a_num a_word
        else
            a_num="${a}"
            a_word=''
            if [[ ! "${a_num}" =~ [0-9] ]]; then
                warn "Invalid version field '${a_num}' in '${a_ver}', only last version field can contain letters."
            fi
        fi
        if [[ "${i}" -eq "${b_last_field_idx}" ]]; then
            split_last_version_field "${b}" b_num b_word
        else
            b_num="${b}"
            b_word=''
            if [[ ! "${b_num}" =~ [0-9] ]]; then
                warn "Invalid version field '${b_num}' in '${b_ver}', only last version field can contain letters."
            fi
        fi

        if [[ "${a_num}" -gt "${b_num}" ]]; then
            res_ref=">v${i}n"
            return
        fi
        if [[ "${a_num}" -lt "${b_num}" ]]; then
            res_ref="<v${i}n"
            return
        fi
        if [[ "${a_word}" > "${b_word}" ]]; then
            res_ref=">v${i}w"
            return
        fi
        if [[ "${a_word}" < "${b_word}" ]]; then
            res_ref="<v${i}w"
            return
        fi
    done

    # version is equal, let's see the suffixes

    local -a a_suffixes
    local -a b_suffixes

    get_suffixes "${a_ver}" a_suffixes
    get_suffixes "${b_ver}" b_suffixes

    if [[ "${#a_suffixes[@]}" -ne "${#b_suffixes[@]}" ]]; then
        if [[ "${#a_suffixes[@]}" -gt "${#b_suffixes[@]}" ]]; then
            append_with "${#a_suffixes[@]}" '' b_suffixes
        else
            append_with "${#b_suffixes[@]}" '' a_suffixes
        fi
    fi

    local a_word_index
    local b_word_index

    for i in $(seq 0 $(("${#a_suffixes[@]}" - 1))); do
        a="${a_suffixes[${i}]}"
        b="${b_suffixes[${i}]}"

        split_suffix "${a}" a_word a_num
        split_suffix "${b}" b_word b_num

        if [[ "${a_word}" = "${b_word}" ]]; then
            if [[ "${a_num}" -gt "${b_num}" ]]; then
                res_ref=">s${i}n"
                return
            fi
            if [[ "${a_num}" -lt "${b_num}" ]]; then
                res_ref="<s${i}n"
                return
            fi
        else
            get_suffix_word_index "${a_word}" a_word_index
            get_suffix_word_index "${b_word}" b_word_index

            if [[ "${a_word_index}" -gt "${b_word_index}" ]]; then
                res_ref=">s${i}w"
                return
            fi
            if [[ "${a_word_index}" -lt "${b_word_index}" ]]; then
                res_ref="<s${i}w"
                return
            fi
        fi
    done

    # suffixes are equal, check revisions
    local a_rev
    local b_rev

    get_revision "${a_ver}" a_rev
    get_revision "${b_ver}" b_rev

    if [[ "${a_rev}" -gt "${b_rev}" ]]; then
        res_ref=">r${i}"
        return
    fi
    if [[ "${a_rev}" -lt "${b_rev}" ]]; then
        res_ref="<r${i}"
        return
    fi

    # versions are equal
    res_ref='='
}

REPO_PAIRS=(
    "gentoo:${GENTOO}"
    "portage-stable:${PORTAGE_STABLE}"
    "coreos-overlay:${COREOS_OVERLAY}"
)

get_repo() {
    local pair="${1}"
    echo -n "${pair#*:}"
}

get_name() {
    local pair="${1}"
    echo -n "${pair%%:*}"
}

cut_leading_path() {
    local path="${1}"
    local len="${#path}"
    local line
    while read -r line; do
        echo "${line:${len}}"
    done
}

cut_leading_dir() {
    local path="${1}"

    cut_leading_path "${path}/"
}

if [[ ! -e "${WORKDIR}/duplicated-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/portage-stable-all-updatable-things" ]] || \
       [[ ! -e "${WORKDIR}/coreos-overlay-all-updatable-things" ]] || \
       [[ ! -e "${WORKDIR}/portage-stable-under-automation" ]] || \
       [[ ! -e "${WORKDIR}/portage-stable-flatcar-only-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/coreos-overlay-flatcar-only-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/flatcar-only-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/portage-stable-common-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/coreos-overlay-common-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/common-pkgs" ]]; then
    if [[ ! -e "${WORKDIR}/flatcar-pkgs" ]]; then
        for p in "${REPO_PAIRS[@]}"; do
            name="$(get_name "${p}")"

            if [[ ! -e "${WORKDIR}/${name}-pkgs" ]] || \
                   [[ ! -e "${WORKDIR}/${name}-eclasses" ]] || \
                   [[ ! -e "${WORKDIR}/${name}-hash" ]] || \
                   [[ ! -e "${WORKDIR}/${name}-date" ]]; then
                repo="$(get_repo "${p}")"
                debug "finding all packages in ${name} (${repo})"
                find "${repo}" -mindepth 3 -name '*.ebuild' |
                    sed -e 's!/[^/]*$!!' |
                    sort -u |
                    cut_leading_dir "${repo}" >"${WORKDIR}/${name}-pkgs"
                debug "finding all eclasses in ${name} (${repo})"
                find "${repo}/eclass" -name '*.eclass' |
                    sort |
                    cut_leading_dir "${repo}" >"${WORKDIR}/${name}-eclasses"
                misc=()
                for m in 'scripts' 'licenses' 'profiles'; do
                    if [[ -d "${repo}/${m}" ]]; then
                        misc+=("${m}")
                    fi
                done
                printf '%s\n' "${misc[@]}" >"${WORKDIR}/${name}-misc"
                git -C "${repo}" log -1 --pretty='%H' >"${WORKDIR}/${name}-hash"
                git -C "${repo}" log -1 --pretty='%cD' >"${WORKDIR}/${name}-date"
            fi
        done

        cat "${WORKDIR}/coreos-overlay-pkgs" "${WORKDIR}/portage-stable-pkgs" | sort -u >"${WORKDIR}/flatcar-pkgs"
    fi

    debug "finding all duplicated packages in portage-stable and coreos-overlay"
    comm -1 -2 "${WORKDIR}/coreos-overlay-pkgs" "${WORKDIR}/portage-stable-pkgs" >"${WORKDIR}/duplicated-pkgs"

    debug "finding all updatable things in portage-stable"
    cat "${WORKDIR}/portage-stable-pkgs" "${WORKDIR}/portage-stable-eclasses" "${WORKDIR}/portage-stable-misc" | sort >"${WORKDIR}/portage-stable-all-updatable-things"
    debug "finding all updatable things in coreos-overlay"
    cat "${WORKDIR}/coreos-overlay-pkgs" "${WORKDIR}/coreos-overlay-eclasses" "${WORKDIR}/coreos-overlay-misc" | sort >"${WORKDIR}/coreos-overlay-all-updatable-things"

    debug "finding all updatable things under automation in portage-stable"
    if [[ -e "${SCRIPTS}/.github/workflows/portage-stable-packages-list" ]]; then
        grep '^[^#]' "${SCRIPTS}/.github/workflows/portage-stable-packages-list" | sort >"${WORKDIR}/portage-stable-under-automation"
    else
        touch "${WORKDIR}/portage-stable-under-automation"
    fi

    debug "finding all flatcar-only packages in portage-stable"
    comm -2 -3 "${WORKDIR}/portage-stable-pkgs" "${WORKDIR}/gentoo-pkgs" >"${WORKDIR}/portage-stable-flatcar-only-pkgs"
    debug "finding all flatcar-only packages in coreos-overlay"
    comm -2 -3 "${WORKDIR}/coreos-overlay-pkgs" "${WORKDIR}/gentoo-pkgs" >"${WORKDIR}/coreos-overlay-flatcar-only-pkgs"
    debug "finding all flatcar-only packages"
    cat "${WORKDIR}/portage-stable-flatcar-only-pkgs" "${WORKDIR}/coreos-overlay-flatcar-only-pkgs" | sort -u >"${WORKDIR}/flatcar-only-pkgs"

    debug "finding all common packages in portage-stable"
    comm -1 -2 "${WORKDIR}/portage-stable-pkgs" "${WORKDIR}/gentoo-pkgs" >"${WORKDIR}/portage-stable-common-pkgs"
    debug "finding all common packages in coreos-overlay"
    comm -1 -2 "${WORKDIR}/coreos-overlay-pkgs" "${WORKDIR}/gentoo-pkgs" >"${WORKDIR}/coreos-overlay-common-pkgs"
    debug "finding all common packages"
    cat "${WORKDIR}/coreos-overlay-common-pkgs" "${WORKDIR}/portage-stable-common-pkgs" | sort -u >"${WORKDIR}/common-pkgs"
fi

get_pkg_name() {
    local name="${1}"
    echo -n "${name#*/}"
}

get_max_version() {
    local pkg="${1}"
    local max_version_name="${2}"

    shift 2

    local repo
    local pkg_path_prefix
    local -a ebuilds
    local e
    local version
    local result
    local -n max_version_ref="${max_version_name}"

    # this is quite a low version
    max_version_ref='0_alpha_alpha_alpha'

    for repo; do
        if [[ ! -d "${repo}/${pkg}" ]]; then
            continue
        fi

        pkg_path_prefix="${repo}/${pkg}/$(get_pkg_name "${pkg}")-"
        ebuilds=( "${pkg_path_prefix}"*.ebuild )

        for e in "${ebuilds[@]}"; do
            # strip prefix
            version="$(cut_leading_path "${pkg_path_prefix}" <<<"${e}")"
            # strip .ebuild
            version="${version:0:-7}"
            # ignore versions like 9999 or 99999999
            if [[ -z "${version//9}" ]]; then
                continue
            fi
            result='='
            gentoo_vercmp "${version}" "${max_version_ref}" result
            if [[ "${result}" = '>'* ]]; then
                max_version_ref="${version}"
            fi
        done
        return
    done
}

find_max_versions() {
    local input="${1}"
    local output="${2}"

    # create the file in case of an empty output
    touch "${output}"

    while read -r line; do
        debug "  - ${line}"
        gentoo_max=''
        get_max_version "${line}" gentoo_max "${GENTOO}"
        flatcar_max=''
        get_max_version "${line}" flatcar_max "${PORTAGE_STABLE}" "${COREOS_OVERLAY}"
        result='='
        gentoo_vercmp "${gentoo_max}" "${flatcar_max}" result
        printf '%s %s\n' "${line}" "gentoo:${gentoo_max} flatcar:${flatcar_max} result:${result}" >>"${output}"
    done < "${input}"
}

if [[ ! -e "${WORKDIR}/portage-stable-common-pkgs-max-versions" ]]; then
    debug "finding max versions of common packages in portage-stable"
    find_max_versions "${WORKDIR}/portage-stable-common-pkgs" "${WORKDIR}/portage-stable-common-pkgs-max-versions"
fi

if [[ ! -e "${WORKDIR}/coreos-overlay-common-pkgs-max-versions" ]]; then
    debug "finding max versions of common packages in coreos-overlay"
    find_max_versions "${WORKDIR}/coreos-overlay-common-pkgs" "${WORKDIR}/coreos-overlay-common-pkgs-max-versions"
fi

if [[ ! -e "${WORKDIR}/common-pkgs-max-versions" ]]; then
    debug "finding max versions of common packages"
    cat "${WORKDIR}/portage-stable-common-pkgs-max-versions" "${WORKDIR}/coreos-overlay-common-pkgs-max-versions" | sort -u >"${WORKDIR}/common-pkgs-max-versions"
fi

debug "done"

percent() {
    local num="${1}"
    local den="${2}"

    bc <<< "scale=2; (${num} * 100) / ${den}"
}

duplicates="$(cat "${WORKDIR}/duplicated-pkgs" | wc -l)"

if [[ "${duplicates}" -gt 0 ]]; then
    warn 'There are duplicated packages in portage-stable and coreos-overlay.'
    warn 'Some stats may be skewed or make no sense.'
    warn 'BEGIN DUPLICATES'
    cat "${WORKDIR}/duplicated-pkgs" >/dev/stderr
    warn 'END DUPLICATES'
fi

# non-failing grep
nfgrep() {
    grep "$@" || :
}

ps_hash="$(cat "${WORKDIR}/portage-stable-hash")"
ps_date="$(cat "${WORKDIR}/portage-stable-date")"
co_hash="$(cat "${WORKDIR}/coreos-overlay-hash")"
co_date="$(cat "${WORKDIR}/coreos-overlay-date")"
gentoo_hash="$(cat "${WORKDIR}/gentoo-hash")"
gentoo_date="$(cat "${WORKDIR}/gentoo-date")"

total="$(cat "${WORKDIR}/flatcar-pkgs" | wc -l)"
ps_pkgs="$(cat "${WORKDIR}/portage-stable-pkgs" | wc -l)"
co_pkgs="$(cat "${WORKDIR}/coreos-overlay-pkgs" | wc -l)"
ours="$(cat "${WORKDIR}/flatcar-only-pkgs" | wc -l)"
total_common="$(cat "${WORKDIR}/common-pkgs" | wc -l)"
ps_common="$(cat "${WORKDIR}/portage-stable-common-pkgs" | wc -l)"
co_common="$(cat "${WORKDIR}/coreos-overlay-common-pkgs" | wc -l)"
newer="$(nfgrep -e 'result:<' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
equal="$(nfgrep -e 'result:=' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
outdated="$(nfgrep -e 'result:>' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
outdated_rev="$(nfgrep -e 'result:>r' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
outdated_suf="$(nfgrep -e 'result:>s' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
outdated_ver="$(nfgrep -e 'result:>v' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"

ps_newer="$(nfgrep -e 'result:<' "${WORKDIR}/portage-stable-common-pkgs-max-versions" | wc -l)"
ps_equal="$(nfgrep -e 'result:=' "${WORKDIR}/portage-stable-common-pkgs-max-versions" | wc -l)"
ps_outdated="$(nfgrep -e 'result:>' "${WORKDIR}/portage-stable-common-pkgs-max-versions" | wc -l)"
ps_outdated_rev="$(nfgrep -e 'result:>r' "${WORKDIR}/portage-stable-common-pkgs-max-versions" | wc -l)"
ps_outdated_suf="$(nfgrep -e 'result:>s' "${WORKDIR}/portage-stable-common-pkgs-max-versions" | wc -l)"
ps_outdated_ver="$(nfgrep -e 'result:>v' "${WORKDIR}/portage-stable-common-pkgs-max-versions" | wc -l)"

co_newer="$(nfgrep -e 'result:<' "${WORKDIR}/coreos-overlay-common-pkgs-max-versions" | wc -l)"
co_equal="$(nfgrep -e 'result:=' "${WORKDIR}/coreos-overlay-common-pkgs-max-versions" | wc -l)"
co_outdated="$(nfgrep -e 'result:>' "${WORKDIR}/coreos-overlay-common-pkgs-max-versions" | wc -l)"
co_outdated_rev="$(nfgrep -e 'result:>r' "${WORKDIR}/coreos-overlay-common-pkgs-max-versions" | wc -l)"
co_outdated_suf="$(nfgrep -e 'result:>s' "${WORKDIR}/coreos-overlay-common-pkgs-max-versions" | wc -l)"
co_outdated_ver="$(nfgrep -e 'result:>v' "${WORKDIR}/coreos-overlay-common-pkgs-max-versions" | wc -l)"

ps_auto_total=$(cat "${WORKDIR}/portage-stable-all-updatable-things" | wc -l)
ps_auto_listed=$(cat "${WORKDIR}/portage-stable-under-automation" | wc -l)
co_auto_total=$(cat "${WORKDIR}/coreos-overlay-all-updatable-things" | wc -l)
co_auto_listed='0'
auto_total=$((ps_auto_total + co_auto_total))
auto_listed=$((ps_auto_listed + co_auto_listed))

out_type='spaces'
if [[ -n "${JSON}" ]]; then
    out_type='json'
fi

out_init() {
    "${out_type}_out_init" "${@}"
}

out_start() {
    "${out_type}_out_start" "${@}"
}

out_kv() {
    "${out_type}_out_kv" "${@}"
}

out_end() {
    "${out_type}_out_end" "${@}"
}

out_fini() {
    "${out_type}_out_fini" "${@}"
}

spaces_indent=' '
spaces_first_len=64
spaces_second_len=8
spaces_first_group_start=1

spaces_out_init() {
    :
}

spaces_out_start() {
    if [[ ${spaces_first_group_start} -eq 0 ]]; then
        printf '\n';
    else
        spaces_first_group_start=0
    fi
    printf '%s:\n' "$*"
}

spaces_repeat() {
    local var_name="${1}"
    local count="${2}"
    local -n var_ref="${var_name}"
    local str="$(printf '=%.0s' $(seq 1 "${count}"))"

    var_ref="${str//=/ }"
}

spaces_out_kv() {
    local k="${1}"
    local t="${2}"
    local v="${3}"
    local kl="${#k}"
    local ktabl=$((spaces_first_len-kl-1))
    local ktab

    spaces_repeat ktab "${ktabl}"

    if [[ "${#}" -gt 3 ]]; then
        local vl="${#v}"
        local vtabl=$((spaces_second_len-vl))
        local vtab
        local p="${4}"

        spaces_repeat vtab "${vtabl}"

        printf '%s%s:%s%s%s(%s%%)\n' "${spaces_indent}" "${k}" "${ktab}" "${v}" "${vtab}" "${p}"
    else
        printf '%s%s:%s%s\n' "${spaces_indent}" "${k}" "${ktab}" "${v}"
    fi
}

spaces_out_end() {
    :
}

spaces_out_fini() {
    :
}

declare -a json_out_array

json_drop_comma() {
    local l="${#json_out_array[@]}"

    if [[ "${l}" -eq 0 ]]; then
        return
    fi

    local i=$((l - 1))

    json_out_array[${i}]="${json_out_array[${i}]%,}"
}

json_out_init() {
    json_out_array=('{')
}

json_out_start() {
    json_out_array+=("  \"${*}\": {")
}

json_escape_string() {
    local var_name="${1}"
    local str="${2}"
    local -n var_ref="${var_name}"
    # escape backslashes
    local escaped="${str//\\/\\\\}"
    # escape double quotes
    var_ref="\"${escaped//\"/\\\"}\""
}

json_v() {
    local var_name="${1}"
    local t="${2}"
    local v="${3}"
    local -n var_ref="${var_name}"

    case "${t}" in
        i|f)
            var_ref="${v}"
            ;;
        *)
            json_escape_string "${var_name}" "${v}"
            ;;
    esac
}

json_out_kv() {
    local k="${1}"
    local t="${2}"
    local v="${3}"
    local pv

    json_v pv "${t}" "${v}"
    json_out_array+=("    \"${k}\": ${pv},")
}

json_out_end() {
    json_drop_comma
    json_out_array+=('  },')
}

json_out_fini() {
    json_drop_comma
    json_out_array+=('}')
    printf '%s\n' "${json_out_array[@]}"
}

out_init

out_start 'meta'
out_kv 'portage-stable hash' s "${ps_hash}"
out_kv 'portage-stable date' s "${ps_date}"
out_kv 'coreos-overlay hash' s "${co_hash}"
out_kv 'coreos-overlay date' s "${co_date}"
out_kv 'gentoo hash' s "${gentoo_hash}"
out_kv 'gentoo date' s "${gentoo_date}"
out_end

out_start 'general'
out_kv 'total packages' i "${total}"
out_kv 'portage-stable' i "${ps_pkgs}" "$(percent "${ps_pkgs}" "${total}")"
out_kv 'coreos-overlay' i "${co_pkgs}" "$(percent "${co_pkgs}" "${total}")"
out_kv 'our packages' i "${ours}" "$(percent "${ours}" "${total}")"
out_kv 'common packages' i "${total_common}" "$(percent "${total_common}" "${total}")"
out_kv 'common packages in portage-stable' i "${ps_common}" "$(percent "${ps_common}" "${total}")"
out_kv 'common packages in coreos-overlay' i "${co_common}" "$(percent "${co_common}" "${total}")"
out_kv 'newer packages' i "${newer}" "$(percent "${newer}" "${total}")"
out_kv 'equal packages' i "${equal}" "$(percent "${equal}" "${total}")"
out_kv 'outdated packages' i "${outdated}" "$(percent "${outdated}" "${total}")"
out_kv 'outdated revision packages' i "${outdated_rev}" "$(percent "${outdated_rev}" "${total}")"
out_kv 'outdated suffix packages' i "${outdated_suf}" "$(percent "${outdated_suf}" "${total}")"
out_kv 'outdated version packages' i "${outdated_ver}" "$(percent "${outdated_ver}" "${total}")"
out_end

out_start 'portage-stable'
out_kv 'total packages' i "${ps_pkgs}"
out_kv 'common packages' i "${ps_common}" "$(percent "${ps_common}" "${ps_pkgs}")"
out_kv 'newer packages' i "${ps_newer}" "$(percent "${ps_newer}" "${ps_pkgs}")"
out_kv 'equal packages' i "${ps_equal}" "$(percent "${ps_equal}" "${ps_pkgs}")"
out_kv 'all outdated packages' i "${ps_outdated}" "$(percent "${ps_outdated}" "${ps_pkgs}")"
out_kv 'outdated revision packages' i "${ps_outdated_rev}" "$(percent "${ps_outdated_rev}" "${ps_pkgs}")"
out_kv 'outdated suffix packages' i "${ps_outdated_suf}" "$(percent "${ps_outdated_suf}" "${ps_pkgs}")"
out_kv 'outdated version packages' i "${ps_outdated_ver}" "$(percent "${ps_outdated_ver}" "${ps_pkgs}")"
out_end

out_start 'coreos-overlay'
out_kv 'total packages' i "${co_pkgs}"
out_kv 'common packages' i "${co_common}" "$(percent "${co_common}" "${co_pkgs}")"
out_kv 'newer packages' i "${co_newer}" "$(percent "${co_newer}" "${co_pkgs}")"
out_kv 'equal packages' i "${co_equal}" "$(percent "${co_equal}" "${co_pkgs}")"
out_kv 'all outdated packages' i "${co_outdated}" "$(percent "${co_outdated}" "${co_pkgs}")"
out_kv 'outdated revision packages' i "${co_outdated_rev}" "$(percent "${co_outdated_rev}" "${co_pkgs}")"
out_kv 'outdated suffix packages' i "${co_outdated_suf}" "$(percent "${co_outdated_suf}" "${co_pkgs}")"
out_kv 'outdated version packages' i "${co_outdated_ver}" "$(percent "${co_outdated_ver}" "${co_pkgs}")"
out_end

out_start 'automation'
out_kv 'total updatable things' i "${auto_total}"
out_kv 'total updatable things under automation' i "${auto_listed}" "$(percent "${auto_listed}" "${auto_total}")"
out_kv 'updatable things in portage-stable' i "${ps_auto_total}"
out_kv 'updatable things under automation in portage-stable' i "${ps_auto_listed}" "$(percent "${ps_auto_listed}" "${ps_auto_total}")"
out_kv 'updatable things in coreos-overlay' i "${co_auto_total}"
out_kv 'updatable things under automation in coreos-overlay' i "${co_auto_listed}" "$(percent "${co_auto_listed}" "${co_auto_total}")"
out_end

out_fini
